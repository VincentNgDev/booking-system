//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model Account {
  ObjectID              String    @id() @default(uuid())
  IsDeleted             Boolean   @default(false)
  DeletedAt             DateTime? @default(dbgenerated("NULL"))
  Version               Int       @default(1)
  CreatedAt             DateTime  @default(now())
  UpdatedAt             DateTime? @default(dbgenerated("NULL")) @updatedAt()
  Type                  String
  Provider              String    @unique()
  ProviderAccountID     String    @unique()
  RefreshToken          String?   @db.Text()
  AccessToken           String?   @db.Text()
  ExpiresAt             Int?
  TokenType             String?
  Scope                 String?
  IdToken               String?   @db.Text()
  SessionState          String?
  RefreshTokenExpiresIn Int?
  UserID                String    @unique()
  User                  User?     @relation(fields: [UserID], references: [ObjectID])

  @@index([UserID])
}

model User {
  ObjectID      String          @id() @default(uuid())
  ObjectName    String?
  ObjectNumber  String?
  IsDeleted     Boolean         @default(false)
  DeletedAt     DateTime?       @default(dbgenerated("NULL"))
  Version       Int             @default(1)
  CreatedAt     DateTime        @default(now())
  CreatedBy     String?
  UpdatedAt     DateTime?       @default(dbgenerated("NULL")) @updatedAt()
  UpdatedBy     String?
  Accounts      Account[]
  Authenticator Authenticator[]
  Sessions      Session[]
}

model Authenticator {
  CredentialID         String  @unique()
  ProviderAccountId    String
  CredentialPublicKey  String
  Counter              Int
  CredentialDeviceType String
  CredentialBackedUp   Boolean
  Transports           String?
  UserId               String
  User                 User    @relation(fields: [UserId], references: [ObjectID], onDelete: Cascade)

  @@id([UserId, CredentialID])
}

model Profile {
  ObjectID            String    @id() @default(uuid())
  IsDeleted           Boolean   @default(false)
  DeletedAt           DateTime? @default(dbgenerated("NULL"))
  Version             Int       @default(1)
  CreatedAt           DateTime  @default(now())
  CreatedBy           String?
  UpdatedAt           DateTime? @default(dbgenerated("NULL")) @updatedAt()
  UpdatedBy           String?
  AddressLineOne      String?
  AddressLineTwo      String?
  AddressUnitNumber   String?
  AdddressFloorNumber String?
  AddressCountry      String?
  AddressCity         String?
  AddressState        String?
  AddressPostalCode   String?
  Email               String?
  Phone               String?
  MobilePhone         String?
  Fax                 String?
  DateOfBirth         DateTime?
}

model Session {
  ObjectID     String    @id() @default(uuid())
  IsDeleted    Boolean   @default(false)
  DeletedAt    DateTime? @default(dbgenerated("NULL"))
  Version      Int       @default(1)
  CreatedAt    DateTime  @default(now())
  UpdatedAt    DateTime? @default(dbgenerated("NULL")) @updatedAt()
  SessionToken String    @unique()
  Expires      DateTime
  UserID       String    @unique()
  User         User?     @relation(fields: [UserID], references: [ObjectID])

  @@index([UserID])
}

model VerificationToken {
  Identifier String   @unique()
  Token      String   @unique()
  Expires    DateTime
}
